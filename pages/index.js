import { useEffect, useReducer, useState } from 'react'
import _ from 'lodash'
import Head from 'next/head'
import Color from 'color'
import { DndProvider, useDrop } from 'react-dnd'
import { HTML5Backend } from 'react-dnd-html5-backend'

import Artboard from '../components/Artboard'
import artboardJson from '../artboard'
import { mapArtboard, scaleDimension } from '../utils/artboardUtils'
import { colorsWithFallback } from '../utils/colorUtils'
import Layer from '../components/Layer'
import LayerControl from '../components/LayerControl'
import Reducer from '../utils/reducer'

export default function Home() {
    const artboardWrapperStyles = {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: '#EEEEEE',
        backgroundImage: 'radial-gradient(#BBBBBB 1px, transparent 0)',
        backgroundSize: '24px 24px',
        backgroundPosition: '-6px -6px',
    }

    // const [artboard, setArtboard] = useState({ layers: [] })
    const [scaleFactor, setScaleFactor] = useState(1)
    const [isScaled, setIsScaled] = useState(false)
    const [artboardSize, setArtboardSize] = useState({
        artboardWidth: 1000,
        artboardHeight: 1000,
        containerWidth: 1000,
        containerHeight: 1000,
        xOffset: 0,
        yOffset: 0,
    })
    const [highlightedLayer, highlightLayer] = useState(null)
    const [selectedLayer, selectLayer] = useState(null)

    let mappedArtboard = mapArtboard(artboardJson)

    // const storeArtboard = (artboard) => {
    //     window.localStorage.setItem('artboard', artboard)
    // }
    // const retrieveArtboard = () => {
    //     return window.localStorage.getItem('artboard')
    // }

    const [artboard, dispatch] = useReducer(Reducer, mappedArtboard)

    useEffect(() => {
        // let retrievedArtboard = retrieveArtboard()
        // if (retrievedArtboard === undefined) {
        //     let mappedArtboard = mapArtboard(artboardJson)
        //     storeArtboard(JSON.stringify(mappedArtboard))
        //     setArtboard(mappedArtboard)
        //     console.log(retrievedArtboard)
        // } else {
        //     setArtboard(JSON.parse(retrievedArtboard))
        //     console.log(JSON.parse(retrievedArtboard))
        // }

        const resizeArtboard = () => {
            // Get appropriate size for artboard based on viewport size
            let wrapper = document.getElementById(`artboard-wrapper`)
            let viewportWidth = wrapper.clientWidth
            let viewportHeight = wrapper.clientHeight
            let newScaleFactor =
                _.min([wrapper.clientWidth, wrapper.clientHeight]) / 1000
            let artboardSize = 1000 * newScaleFactor
            setArtboardSize({
                artboardWidth: artboardSize,
                artboardHeight: artboardSize,
                containerWidth: viewportWidth,
                containerHeight: viewportHeight,
                xOffset: (viewportWidth - artboardSize) / 2,
                yOffset: (viewportHeight - artboardSize) / 2,
            })
            setScaleFactor(newScaleFactor)
            setIsScaled(true)
        }

        if (document != null) {
            resizeArtboard()
        }

        window.addEventListener('resize', resizeArtboard)

        return () => {
            window.removeEventListener('resize', resizeArtboard)
        }
    }, [])

    return (
        <div>
            <link
                href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,300i,400,400i,700,700i,900,900i|IBM+Plex+Mono:200,200i,400,400i"
                rel="stylesheet"
            />
            <link
                href="https://fonts.googleapis.com/icon?family=Material+Icons"
                rel="stylesheet"
            />

            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div
                id="artboard-wrapper"
                style={artboardWrapperStyles}
                onClick={() => selectLayer(null)}
            >
                <DndProvider backend={HTML5Backend}>
                    <Artboard
                        scaleFactor={scaleFactor}
                        artboardSize={artboardSize}
                        dispatch={dispatch}
                    >
                        <div
                            className="artboard__svg-wrapper"
                            style={{
                                position: 'relative',
                                width: artboardSize.artboardWidth,
                                height: artboardSize.artboardHeight,
                                margin: `${artboardSize.yOffset}px ${artboardSize.xOffset}px`,
                            }}
                        >
                            <svg
                                width={artboardSize.width}
                                height={artboardSize.height}
                                viewBox="0 0 1000 1000"
                                overflow="visible"
                            >
                                <defs>
                                    {_.map(artboard.layers, (layer) => {
                                        let { fill } = layer.adjustments
                                        if (fill === undefined) return null
                                        let fillColors = colorsWithFallback(
                                            fill.color,
                                            fill.gradient
                                        )
                                        let fillConfig
                                        if (fill.type === 'gradient') {
                                            fillConfig = fillColors.gradient
                                        } else {
                                            fillConfig = {
                                                angle: 0,
                                                start: fillColors.solid,
                                                end: fillColors.solid,
                                            }
                                        }

                                        return (
                                            <linearGradient
                                                key={layer.id}
                                                id={`gradient${layer.id}`}
                                                x1="0%"
                                                x2="0%"
                                                y1="0%"
                                                y2="100%"
                                            >
                                                <stop
                                                    className="stop1"
                                                    offset="0%"
                                                    stopColor={Color(
                                                        fillConfig.start
                                                    ).hex()}
                                                />
                                                <stop
                                                    className="stop2"
                                                    offset="100%"
                                                    stopColor={Color(
                                                        fillConfig.end
                                                    ).hex()}
                                                />
                                            </linearGradient>
                                        )
                                    })}
                                </defs>
                                {_.map(
                                    _.orderBy(artboard.layers, 'order'),
                                    (layer, index) => {
                                        return (
                                            <Layer
                                                // dragLayers={dragLayers}
                                                // highlightLayer={highlightLayer}
                                                key={layer.id}
                                                layer={layer}
                                                highlightLayer={highlightLayer}
                                                highlightedLayer={
                                                    highlightedLayer
                                                }
                                                isScaled={isScaled}
                                                scaleFactor={scaleFactor}
                                                // scaleLayer={scaleLayer}
                                            />
                                        )
                                    }
                                )}
                            </svg>
                            <div
                                style={{
                                    position: 'absolute',
                                    top: 0,
                                    left: 0,
                                    width: scaleDimension(1000, scaleFactor),
                                    height: scaleDimension(1000, scaleFactor),
                                }}
                            >
                                {_.map(
                                    _.orderBy(artboard.layers, 'order'),
                                    (layer, index) => {
                                        return (
                                            <LayerControl
                                                key={layer.id}
                                                artboardSize={artboardSize}
                                                layer={layer}
                                                highlightLayer={highlightLayer}
                                                highlightedLayer={
                                                    highlightedLayer
                                                }
                                                selectLayer={selectLayer}
                                                selectedLayer={selectedLayer}
                                                isScaled={isScaled}
                                                scaleFactor={scaleFactor}
                                            />
                                        )
                                    }
                                )}
                            </div>
                        </div>
                    </Artboard>
                </DndProvider>
            </div>
        </div>
    )
}
